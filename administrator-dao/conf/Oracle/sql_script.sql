-- -----------------------------------------------------
-- Table times_limit
-- -----------------------------------------------------
drop table times_limit;

CREATE  TABLE  times_limit (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  time_limit_month INT NOT NULL ,
  CONSTRAINT times_limit_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_TIMES_LIMIT INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TIMES_LIMIT 
BEFORE INSERT ON TIMES_LIMIT 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_TIMES_LIMIT.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


CREATE  TABLE  estado_orden_stock (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  codigo VARCHAR(45) NOT NULL ,
  CONSTRAINT estado_orden_stock_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_EST_ORDEN_STOCK INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_estado_orden_stock 
BEFORE INSERT ON estado_orden_stock 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_EST_ORDEN_STOCK.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- Table agreement
-- -----------------------------------------------------
CREATE  TABLE  agreement (
  id INT NOT NULL  ,
  numero_convenio VARCHAR(10) NOT NULL ,
  status INT NOT NULL ,
  fecha_inicio INT  NOT NULL ,
  fecha_fin INT  NOT NULL ,
  id_time_limit INT  NOT NULL ,
  commerce_id INT  NOT NULL ,
  PRIMARY KEY (id) ,
  CONSTRAINT fk_time_limit
    FOREIGN KEY (id_time_limit )
    REFERENCES times_limit (id )
 );
CREATE  INDEX FK_TIME_LIMIT_IDX ON agreement(ID_TIME_LIMIT ASC); 
CREATE SEQUENCE SEQUENCE_AGREEMENT INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_AGREEMENT 
BEFORE INSERT ON agreement 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_AGREEMENT
	SELECT SEQUENCE_AGREEMENT.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table authorities
-- -----------------------------------------------------
CREATE  TABLE  authorities (
  id INT NOT NULL,
  authority VARCHAR(45) NOT NULL ,
  description VARCHAR(45) NOT NULL ,
  PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_AUTHORITIES INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_AUTHORITIES 
BEFORE INSERT ON authorities 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_AUTHORITIES.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table economic_activity
-- -----------------------------------------------------
CREATE  TABLE  economic_activity (
  id INT NOT NULL,
  nombre VARCHAR(300) NOT NULL,
  PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_ECONOMIC_ACTIVITY INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_ECONOMIC_ACTIVITY
BEFORE INSERT ON economic_activity 
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_ECONOMIC_ACTIVITY.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table commerce
-- -----------------------------------------------------
CREATE  TABLE  commerce (
  id INT NOT NULL,
  rut VARCHAR(12) NOT NULL ,
  razon_social VARCHAR(45) NOT NULL ,
  mnemotecnico VARCHAR(5) NOT NULL ,
  fecha_activacion INT NOT NULL ,
  id_actividad_economica INT NOT NULL ,
  status INT NOT NULL ,
  PRIMARY KEY (id) ,
  CONSTRAINT fk_economic_activity
    FOREIGN KEY (id_actividad_economica )
    REFERENCES economic_activity (id )
);
CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_COMMERCE INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_COMMERCE
BEFORE INSERT ON commerce 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_COMMERCE
	SELECT SEQUENCE_COMMERCE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- Table financial_institution
-- -----------------------------------------------------
CREATE  TABLE  financial_institution (
  id INT NOT NULL  ,
  rut VARCHAR(12) NOT NULL ,
  razon_social VARCHAR(45) NOT NULL ,
  mnemotecnico VARCHAR(5) NOT NULL ,
  fecha_activacion INT NOT NULL,
  status INT NOT NULL,
  invocation_path VARCHAR(500) NOT NULL ,
  PRIMARY KEY (id)
  
);
CREATE  UNIQUE INDEX rutFI_UNIQUE ON financial_institution(rut ASC); 

CREATE SEQUENCE SEQUENCE_FINANCIAL_INSTITUTION INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_FINANCIAL_INSTITUTION
BEFORE INSERT ON financial_institution 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_FINANCIAL_INSTITUTION
	SELECT SEQUENCE_FINANCIAL_INSTITUTION.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table commerce_agreement_fi
-- -----------------------------------------------------

CREATE  TABLE  commerce_agreement_fi (
  financial_institution_id INT NOT NULL ,
  commerce_id INT NOT NULL ,
  agreement_id INT NOT NULL ,
  
  PRIMARY KEY (financial_institution_id, commerce_id, agreement_id) ,
  CONSTRAINT fk_c_a_if_commerce
    FOREIGN KEY (commerce_id )
    REFERENCES commerce (id )
   ,
  CONSTRAINT fk_c_a_if_f_institution1
    FOREIGN KEY (financial_institution_id )
    REFERENCES financial_institution (id )
   ,
  CONSTRAINT fk_c_a_if_agreement1
    FOREIGN KEY (agreement_id )
    REFERENCES agreement (id )
);
  
CREATE  INDEX fk_c_a_if_f1_idx ON commerce_agreement_fi(financial_institution_id ASC); 
CREATE  INDEX fk_c_a_if_commerce_idx ON commerce_agreement_fi(commerce_id ASC); 
CREATE  INDEX fk_c_a_if_agreement1_idx ON commerce_agreement_fi(agreement_id ASC); 


-- -----------------------------------------------------
-- Table questions
-- -----------------------------------------------------
CREATE  TABLE  questions (
  id INT NOT NULL,
  question VARCHAR(300) NOT NULL,
  PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_QUESTIONS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_QUESTIONS
BEFORE INSERT ON questions 
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_QUESTIONS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table questions_answers
-- -----------------------------------------------------
CREATE  TABLE  questions_answers (
  id INT NOT NULL,
  question VARCHAR(300) NOT NULL,
  answer VARCHAR(300) NOT  NULL,
  PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_QUESTIONS_ANSWERS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_QUESTIONS_ANSWERS
BEFORE INSERT ON questions_answers 
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_QUESTIONS_ANSWERS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table channels
-- -----------------------------------------------------
CREATE  TABLE  channels (
  id INT NOT NULL,
  description  VARCHAR(45) NOT NULL,
  CONSTRAINT channels_PK PRIMARY KEY (id) 
);

CREATE SEQUENCE SEQUENCE_CHANNELS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CHANNELS 
BEFORE INSERT ON channels 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_CHANNELS
	SELECT SEQUENCE_CHANNELS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- Table urls_callback
-- -----------------------------------------------------
CREATE  TABLE  urls_callback (
  id INT NOT NULL  ,
  id_agreement INT NOT NULL,
  end_path VARCHAR(500) NOT NULL,
  confirmation_path VARCHAR(500) NOT NULL,
  id_channel INT NOT NULL,
  confirmation_method VARCHAR(15) NULL ,
  confirmation_output VARCHAR(15) NULL ,
  PRIMARY KEY (id) ,
  CONSTRAINT fk_agreement
    FOREIGN KEY (id_agreement )
    REFERENCES agreement (id )
   ,
  CONSTRAINT fk_channel
    FOREIGN KEY (id_channel )
    REFERENCES channels (id )
);
CREATE  INDEX fk_agreement_idx ON urls_callback(id_agreement ASC); 
CREATE  INDEX fk_channel_idx ON urls_callback(id_channel ASC); 

CREATE SEQUENCE SEQUENCE_URLS_CALLBACK INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_URLS_CALLBACK
BEFORE INSERT ON urls_callback 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_questions_answers
	SELECT SEQUENCE_URLS_CALLBACK.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table users
-- -----------------------------------------------------
CREATE  TABLE  users (
  id INT NOT NULL  ,
  username VARCHAR(10) NOT NULL ,
  password VARCHAR(50) NOT NULL ,
  name VARCHAR(300) NOT NULL,
  rut VARCHAR(11) NOT NULL,
  email VARCHAR(45) NOT NULL ,
  phone VARCHAR(15) NOT NULL,
  status INT NOT NULL ,
  attempts INT NOT NULL ,
  password_expire INT NOT NULL,
  PRIMARY KEY (id) 
);
CREATE  UNIQUE INDEX username_UNIQUE ON users(username ASC); 
CREATE  UNIQUE INDEX email_UNIQUE ON users(email ASC); 
--CREATE  UNIQUE INDEX useraccount_UNIQUE ON users(useraccount ASC); 
--CREATE  INDEX fk_tariff_idx ON users(id_tariff ASC); 


CREATE SEQUENCE SEQUENCE_USERS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_USERS
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_questions_answers
	SELECT SEQUENCE_USERS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table users_authorities
-- -----------------------------------------------------
CREATE  TABLE  users_authorities (
  id_user INT NOT NULL ,
  id_authorities INT NOT NULL,
   PRIMARY KEY (id_user, id_authorities) ,
  CONSTRAINT fk_user_ua
    FOREIGN KEY (id_user )
    REFERENCES users (id )
   ,
  CONSTRAINT fk_authorities_ua
    FOREIGN KEY (id_authorities )
    REFERENCES authorities (id )
 
);
CREATE  INDEX fk_user_ua_idx ON users_authorities(id_user ASC); 
CREATE  INDEX fk_authorities_ua_idx ON users_authorities(id_authorities ASC);    



-- -----------------------------------------------------
-- Table users_commerce
-- -----------------------------------------------------
CREATE  TABLE  users_commerce (
  id INT NOT NULL  ,
  id_user INT NOT NULL,
  id_commerce INT NOT NULL,
  PRIMARY KEY (id) ,
  CONSTRAINT fk_user_c
    FOREIGN KEY (id_user )
    REFERENCES users (id )
   ,
  CONSTRAINT fk_commerce_c
    FOREIGN KEY (id_commerce )
    REFERENCES commerce (id )
);
CREATE  INDEX fk_user_idx ON users_commerce(id_user ASC); 
CREATE  INDEX fk_commerce_idx ON users_commerce(id_commerce ASC);    


CREATE SEQUENCE SEQUENCE_USERS_COMMERCE INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_USERS_COMMERCE
BEFORE INSERT ON users_commerce
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_questions_answers
	SELECT SEQUENCE_USERS_COMMERCE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table users_financial_institution
-- -----------------------------------------------------
CREATE  TABLE  users_financial_institution (
  id INT NOT NULL  ,
  id_user INT NOT NULL,
  id_financial_institution INT NOT NULL,
  PRIMARY KEY (id) ,
  CONSTRAINT fk_user_if
    FOREIGN KEY (id_user )
    REFERENCES users (id )
   ,
  CONSTRAINT fk_financial_if
    FOREIGN KEY (id_financial_institution )
    REFERENCES financial_institution (id )
);
CREATE  INDEX fk_DDuser_idx ON users_financial_institution(id_user ASC); 
CREATE  INDEX fk_financial_idx ON users_financial_institution(id_financial_institution ASC);    

CREATE SEQUENCE SEQUENCE_USERS_FINANCIAL_INST INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_USERS_FINANCIAL_INST
BEFORE INSERT ON users_financial_institution
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_questions_answers
	SELECT SEQUENCE_USERS_FINANCIAL_INST.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table users_questions_answers
-- -----------------------------------------------------
CREATE  TABLE  users_questions_answers (
  id_user INT NOT NULL ,
  id_question_answer INT NOT NULL ,
  CONSTRAINT fk_user_uqax
    FOREIGN KEY (id_user )
    REFERENCES users (id )
    
       ,
  CONSTRAINT fk_question_uqax
    FOREIGN KEY (id_question_answer)
    REFERENCES questions_answers (id )

);

CREATE  INDEX fk_question_uqa_idx ON users_questions_answers(id_question_answer ASC); 


-- -----------------------------------------------------
-- Table system_log
-- -----------------------------------------------------
CREATE TABLE  system_log (
  id INT NOT NULL ,
  iduser INT NOT NULL,
  loglevel INT NOT NULL,
  action VARCHAR(255)  NOT NULL,
  description VARCHAR(255)  NOT NULL,
  data VARCHAR(255), -- data BLOB,
  tablename VARCHAR(255) NOT NULL,
  pagename VARCHAR(255) NOT NULL,
  ipaddress VARCHAR(255) NOT NULL,
  creationdate TIMESTAMP with time zone NOT NULL,
  agent int NOT NULL ,
  PRIMARY KEY  (id)
);
CREATE SEQUENCE SEQUENCE_system_log INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_system_log
BEFORE INSERT ON system_log
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_questions_answers
	SELECT SEQUENCE_system_log.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- Table DE CUMPLIMIENTO
-- -----------------------------------------------------



-- -----------------------------------------------------
-- Table CUMPLIMIENTO
-- -----------------------------------------------------

drop table CUMPLIMIENTO;

DROP TABLE CUMPLIMIENTO;

  CREATE TABLE CUMPLIMIENTO (	
	ID INT NOT NULL, 
	LLAVE VARCHAR2(255 BYTE), 
	TC_PO_LINE_ID VARCHAR2(255 BYTE), 
	CUMPL_CALC VARCHAR2(255 BYTE), 
	CUMPL_EOM VARCHAR2(255 BYTE), 
	CUMPL_BTK VARCHAR2(255 BYTE), 
	FECHA_COMPROMISO_EOM VARCHAR2(255 BYTE), 
	FECHA_COMPROMISO_BTK VARCHAR2(255 BYTE), 
	ESTADO_CALCE_EOM VARCHAR2(255 BYTE), 
	SUBESTADO_CALCE_EOM VARCHAR2(255 BYTE), 
	FECHA_CALCE_EOM VARCHAR2(255 BYTE), 
	HORA_CALCE_EOM VARCHAR2(255 BYTE), 
	ESTADO_CALCE_BTK VARCHAR2(255 BYTE), 
	SUBESTADO_CALCE_BTK VARCHAR2(255 BYTE), 
	FECHA_CALCE_BTK VARCHAR2(255 BYTE), 
	HORA_CALCE_BTK VARCHAR2(255 BYTE), 
	CRUCE_ESTADO VARCHAR2(255 BYTE), 
	CRUCE_SUB_ESTADO VARCHAR2(255 BYTE), 
	N_SOLICITUD_CLIENTE VARCHAR2(255 BYTE), 
	N_ORDEN_DISTRIBU VARCHAR2(255 BYTE), 
	FECHA_CREACION_ORDEN VARCHAR2(255 BYTE), 
	EST_ORDEN VARCHAR2(255 BYTE), 
	ESTADO_DE_LINEA VARCHAR2(255 BYTE), 
	SKU VARCHAR2(255 BYTE), 
	CANT_DESC_SKU VARCHAR2(255 BYTE), 
	LOCAL_VENTA VARCHAR2(255 BYTE), 
	DEPART VARCHAR2(255 BYTE), 
	BODEGADESP VARCHAR2(255 BYTE), 
	RUTCLIENTE VARCHAR2(255 BYTE), 
	NOMBRECLIENTE VARCHAR2(255 BYTE), 
	APELLIDOCLIENTE VARCHAR2(255 BYTE), 
	DIRECCION_CLIENTE VARCHAR2(255 BYTE), 
	COD_COMUNA VARCHAR2(255 BYTE), 
	COMUNA VARCHAR2(255 BYTE), 
	CIUDAD VARCHAR2(255 BYTE), 
	REGION VARCHAR2(255 BYTE), 
	HORARIO VARCHAR2(255 BYTE), 
	TIPO_ORDEN VARCHAR2(255 BYTE), 
	TIPO_VENTA VARCHAR2(255 BYTE), 
	O_FACILITY_ALIAS_ID VARCHAR2(255 BYTE), 
	REGIONENTREGA VARCHAR2(255 BYTE), 
	TIPO_DE_ORDEN VARCHAR2(255 BYTE), 
	GUIA VARCHAR2(255 BYTE), 
	RUT_EMP VARCHAR2(255 BYTE), 
	DESC_EMP VARCHAR2(255 BYTE), 
	TIPOGUI VARCHAR2(255 BYTE), 
	CLIENTE_RETIRA VARCHAR2(255 BYTE), 
	FECHA_PRIMER_INTENTO VARCHAR2(255 BYTE), 
	NUMERO_INTENTOS VARCHAR2(255 BYTE), 
	FECHA_CREA_PKT VARCHAR2(255 BYTE), 
	HORA_CREA_PKT VARCHAR2(255 BYTE), 
	NRO_OLA VARCHAR2(255 BYTE), 
	FECHA_INICIO_OLA VARCHAR2(255 BYTE), 
	HORA_INICIO_OLA VARCHAR2(255 BYTE), 
	FECHA_TERMINO_OLA VARCHAR2(255 BYTE), 
	HORA_TERMINO_OLA VARCHAR2(255 BYTE), 
	FECHA_CIERRE_CARGA VARCHAR2(255 BYTE), 
	HORA_CIERRE_CARGA VARCHAR2(255 BYTE), 
	FECEMIGUI VARCHAR2(255 BYTE), 
	LEAD_TIME_TRANSPORTE VARCHAR2(255 BYTE), 
	DIA_SEMANA_ETA VARCHAR2(255 BYTE), 
	ENTREGA_DIA_COMPROMISO VARCHAR2(255 BYTE), 
	VENTA_EMPRESA VARCHAR2(255 BYTE), 
	CUMPLE VARCHAR2(255 BYTE), 
	CUMPLIMIENTO_2 VARCHAR2(255 BYTE), 
	CUMPLE_RESUMEN VARCHAR2(255 BYTE), 
	BODEGA_DESPACHO VARCHAR2(255 BYTE), 
	DIF_ETA_CARGA VARCHAR2(255 BYTE), 
	FECHA_CARGA_REQUERIDA VARCHAR2(255 BYTE), 
	EVAL_SISTEMA VARCHAR2(255 BYTE), 
	EVAL_CD VARCHAR2(255 BYTE), 
	EVAL_1ER_INTENTO VARCHAR2(255 BYTE), 
	CUMPLIMIENTO_CLIENTE VARCHAR2(255 BYTE), 
	RESPONSABLE VARCHAR2(255 BYTE), 
	TIPO_CUMPLIMIENTO VARCHAR2(255 BYTE), 
	FECHA_INGRESO DATE, 
	CUMPLIMIENTO_FORMULA VARCHAR2(255 BYTE), 
	PRIMARY KEY (ID) 
	);		

CREATE  INDEX FK_CUMPLIMIENTO_IDX ON CUMPLIMIENTO(ID ASC); 
CREATE  INDEX FK_FECHA_COMPROMISO_EOM ON CUMPLIMIENTO(FECHA_COMPROMISO_EOM ASC); 
CREATE  INDEX FK_CUMPLE ON CUMPLIMIENTO(CUMPLE ASC); 
CREATE  INDEX FK_CUMPLE_RESUMEN ON CUMPLIMIENTO(CUMPLE_RESUMEN ASC); 
CREATE  INDEX FK_CUMPLIMIENTO_2 ON CUMPLIMIENTO(CUMPLIMIENTO_2 ASC); 
CREATE  INDEX FK_RESPONSABLE ON CUMPLIMIENTO(RESPONSABLE ASC); 
CREATE  INDEX FK_TIPO_ORDEN ON CUMPLIMIENTO(TIPO_ORDEN ASC); 
CREATE  INDEX FK_TIPO_VENTA ON CUMPLIMIENTO(TIPO_VENTA ASC); 
CREATE  INDEX FK_CLIENTE_RETIRA ON CUMPLIMIENTO(CLIENTE_RETIRA ASC); 
CREATE  INDEX FK_TIPOGUI ON CUMPLIMIENTO(TIPOGUI ASC); 
CREATE  INDEX FK_HORARIO ON CUMPLIMIENTO(HORARIO ASC); 
CREATE  INDEX FK_VENTA_EMPRESA ON CUMPLIMIENTO(VENTA_EMPRESA ASC); 
CREATE  INDEX FK_DESC_EMP ON CUMPLIMIENTO(DESC_EMP ASC); 
	
CREATE SEQUENCE SEQUENCE_CUMPLIMIENTO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE OR REPLACE TRIGGER TRIGGER_CUMPLIMIENTO
BEFORE INSERT ON CUMPLIMIENTO
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUMPLIMIENTO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table CUMPLIMIENTO_RESPALDO
-- -----------------------------------------------------

drop table CUMPLIMIENTO_RESPALDO;

DROP TABLE CUMPLIMIENTO_RESPALDO;

  CREATE TABLE CUMPLIMIENTO_RESPALDO (	
	ID INT NOT NULL, 
	LLAVE VARCHAR2(255 BYTE), 
	TC_PO_LINE_ID VARCHAR2(255 BYTE), 
	CUMPL_CALC VARCHAR2(255 BYTE), 
	CUMPL_EOM VARCHAR2(255 BYTE), 
	CUMPL_BTK VARCHAR2(255 BYTE), 
	FECHA_COMPROMISO_EOM VARCHAR2(255 BYTE), 
	FECHA_COMPROMISO_BTK VARCHAR2(255 BYTE), 
	ESTADO_CALCE_EOM VARCHAR2(255 BYTE), 
	SUBESTADO_CALCE_EOM VARCHAR2(255 BYTE), 
	FECHA_CALCE_EOM VARCHAR2(255 BYTE), 
	HORA_CALCE_EOM VARCHAR2(255 BYTE), 
	ESTADO_CALCE_BTK VARCHAR2(255 BYTE), 
	SUBESTADO_CALCE_BTK VARCHAR2(255 BYTE), 
	FECHA_CALCE_BTK VARCHAR2(255 BYTE), 
	HORA_CALCE_BTK VARCHAR2(255 BYTE), 
	CRUCE_ESTADO VARCHAR2(255 BYTE), 
	CRUCE_SUB_ESTADO VARCHAR2(255 BYTE), 
	N_SOLICITUD_CLIENTE VARCHAR2(255 BYTE), 
	N_ORDEN_DISTRIBU VARCHAR2(255 BYTE), 
	FECHA_CREACION_ORDEN VARCHAR2(255 BYTE), 
	EST_ORDEN VARCHAR2(255 BYTE), 
	ESTADO_DE_LINEA VARCHAR2(255 BYTE), 
	SKU VARCHAR2(255 BYTE), 
	CANT_DESC_SKU VARCHAR2(255 BYTE), 
	LOCAL_VENTA VARCHAR2(255 BYTE), 
	DEPART VARCHAR2(255 BYTE), 
	BODEGADESP VARCHAR2(255 BYTE), 
	RUTCLIENTE VARCHAR2(255 BYTE), 
	NOMBRECLIENTE VARCHAR2(255 BYTE), 
	APELLIDOCLIENTE VARCHAR2(255 BYTE), 
	DIRECCION_CLIENTE VARCHAR2(255 BYTE), 
	COD_COMUNA VARCHAR2(255 BYTE), 
	COMUNA VARCHAR2(255 BYTE), 
	CIUDAD VARCHAR2(255 BYTE), 
	REGION VARCHAR2(255 BYTE), 
	HORARIO VARCHAR2(255 BYTE), 
	TIPO_ORDEN VARCHAR2(255 BYTE), 
	TIPO_VENTA VARCHAR2(255 BYTE), 
	O_FACILITY_ALIAS_ID VARCHAR2(255 BYTE), 
	REGIONENTREGA VARCHAR2(255 BYTE), 
	TIPO_DE_ORDEN VARCHAR2(255 BYTE), 
	GUIA VARCHAR2(255 BYTE), 
	RUT_EMP VARCHAR2(255 BYTE), 
	DESC_EMP VARCHAR2(255 BYTE), 
	TIPOGUI VARCHAR2(255 BYTE), 
	CLIENTE_RETIRA VARCHAR2(255 BYTE), 
	FECHA_PRIMER_INTENTO VARCHAR2(255 BYTE), 
	NUMERO_INTENTOS VARCHAR2(255 BYTE), 
	FECHA_CREA_PKT VARCHAR2(255 BYTE), 
	HORA_CREA_PKT VARCHAR2(255 BYTE), 
	NRO_OLA VARCHAR2(255 BYTE), 
	FECHA_INICIO_OLA VARCHAR2(255 BYTE), 
	HORA_INICIO_OLA VARCHAR2(255 BYTE), 
	FECHA_TERMINO_OLA VARCHAR2(255 BYTE), 
	HORA_TERMINO_OLA VARCHAR2(255 BYTE), 
	FECHA_CIERRE_CARGA VARCHAR2(255 BYTE), 
	HORA_CIERRE_CARGA VARCHAR2(255 BYTE), 
	FECEMIGUI VARCHAR2(255 BYTE), 
	LEAD_TIME_TRANSPORTE VARCHAR2(255 BYTE), 
	DIA_SEMANA_ETA VARCHAR2(255 BYTE), 
	ENTREGA_DIA_COMPROMISO VARCHAR2(255 BYTE), 
	VENTA_EMPRESA VARCHAR2(255 BYTE), 
	CUMPLE VARCHAR2(255 BYTE), 
	CUMPLIMIENTO_2 VARCHAR2(255 BYTE), 
	CUMPLE_RESUMEN VARCHAR2(255 BYTE), 
	BODEGA_DESPACHO VARCHAR2(255 BYTE), 
	DIF_ETA_CARGA VARCHAR2(255 BYTE), 
	FECHA_CARGA_REQUERIDA VARCHAR2(255 BYTE), 
	EVAL_SISTEMA VARCHAR2(255 BYTE), 
	EVAL_CD VARCHAR2(255 BYTE), 
	EVAL_1ER_INTENTO VARCHAR2(255 BYTE), 
	CUMPLIMIENTO_CLIENTE VARCHAR2(255 BYTE), 
	RESPONSABLE VARCHAR2(255 BYTE), 
	TIPO_CUMPLIMIENTO VARCHAR2(255 BYTE), 
	FECHA_INGRESO DATE, 
	PRIMARY KEY (ID) 
	);		

CREATE  INDEX FK_CUMPLIMIENTO_RESP_IDX ON CUMPLIMIENTO_RESPALDO(ID ASC); 
CREATE  INDEX FK_FECHA_COMPROMISO_RESP_EOM ON CUMPLIMIENTO_RESPALDO(FECHA_COMPROMISO_EOM ASC); 
CREATE  INDEX FK_CUMPLE_RESP ON CUMPLIMIENTO_RESPALDO(CUMPLE ASC); 
CREATE  INDEX FK_CUMPLE_RESUMEN_RESP ON CUMPLIMIENTO_RESPALDO(CUMPLE_RESUMEN ASC); 
CREATE  INDEX FK_CUMPLIMIENTO_2_RESP ON CUMPLIMIENTO_RESPALDO(CUMPLIMIENTO_2 ASC); 
CREATE  INDEX FK_RESPONSABLE_RESP ON CUMPLIMIENTO_RESPALDO(RESPONSABLE ASC); 
CREATE  INDEX FK_TIPO_ORDEN_RESP ON CUMPLIMIENTO_RESPALDO(TIPO_ORDEN ASC); 
CREATE  INDEX FK_TIPO_VENTA_RESP ON CUMPLIMIENTO_RESPALDO(TIPO_VENTA ASC); 
CREATE  INDEX FK_CLIENTE_RETIRA_RESP ON CUMPLIMIENTO_RESPALDO(CLIENTE_RETIRA ASC); 
CREATE  INDEX FK_TIPOGUI_RESP ON CUMPLIMIENTO_RESPALDO(TIPOGUI ASC); 
CREATE  INDEX FK_HORARIO_RESP ON CUMPLIMIENTO_RESPALDO(HORARIO ASC); 
CREATE  INDEX FK_VENTA_EMPRESA_RESP ON CUMPLIMIENTO_RESPALDO(VENTA_EMPRESA ASC); 
CREATE  INDEX FK_DESC_EMP_RESP ON CUMPLIMIENTO_RESPALDO(DESC_EMP ASC); 
	
CREATE SEQUENCE SEQUENCE_CUMPLIMIENTO_RESP INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE OR REPLACE TRIGGER TRIGGER_CUMPLIMIENTO_RESP
BEFORE INSERT ON CUMPLIMIENTO_RESPALDO
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUMPLIMIENTO_RESP.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;




-- -----------------------------------------------------
-- Table ESTADO_CUMPLE
-- -----------------------------------------------------
CREATE  TABLE  ESTADO_CUMPLE (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_ESTADO_CUMPLE ON ESTADO_CUMPLE(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADO_CUMPLE INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_CUMPLE
BEFORE INSERT ON ESTADO_CUMPLE 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_ESTADO_CUMPLE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;




-- -----------------------------------------------------
-- Table ESTADO_CUMPLE_RESUMEN
-- -----------------------------------------------------
CREATE  TABLE  ESTADO_CUMPLE_RESUMEN (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_DESCRIPTION_ESTADO_CUMPLE_RESUMEN ON ESTADO_CUMPLE_RESUMEN(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADO_CUMPLE_RESUMEN INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_CUMPLE_RESUMEN
BEFORE INSERT ON ESTADO_CUMPLE_RESUMEN 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_ESTADO_CUMPLE_RESUMEN.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table ESTADO_CUMPLIMIENTO
-- -----------------------------------------------------
CREATE  TABLE  ESTADO_CUMPLIMIENTO (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_DESCRIPTION_ESTADO_CUMPLIMIENTO ON ESTADO_CUMPLIMIENTO(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADO_CUMPLIMIENTO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_CUMPLIMIENTO
BEFORE INSERT ON ESTADO_CUMPLIMIENTO 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_ESTADO_CUMPLIMIENTO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table ESTADO_RESPONSABLE
-- -----------------------------------------------------
CREATE  TABLE  ESTADO_RESPONSABLE (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_DESCRIPTION_ESTADO_RESPONSABLE ON ESTADO_RESPONSABLE(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADO_RESPONSABLE INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_RESPONSABLE
BEFORE INSERT ON ESTADO_RESPONSABLE 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_ESTADO_RESPONSABLE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table TIPO_ORDEN
-- -----------------------------------------------------
CREATE  TABLE  TIPO_ORDEN (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_TIPO_ORDEN_DESCRIPTION ON TIPO_ORDEN(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_TIPO_ORDEN INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_TIPO_ORDEN
BEFORE INSERT ON TIPO_ORDEN 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_TIPO_ORDEN.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table CLIENTE_RETIRA
-- -----------------------------------------------------
CREATE  TABLE  CLIENTE_RETIRA (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_CLIENTE_RETIRA ON CLIENTE_RETIRA(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_CLIENTE_RETIRA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CLIENTE_RETIRA
BEFORE INSERT ON TIPO_ORDEN 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CLIENTE_RETIRA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table DESCRIPCION_EMPRESA
-- -----------------------------------------------------
CREATE  TABLE  DESCRIPCION_EMPRESA (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_DESCRIPCION_EMPRESA ON DESCRIPCION_EMPRESA(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_DESCRIPCION_EMPRESA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_DESCRIPCION_EMPRESA
BEFORE INSERT ON DESCRIPCION_EMPRESA 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_DESCRIPCION_EMPRESA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END; 



-- -----------------------------------------------------
-- Table TIPO_GUIA
-- -----------------------------------------------------
CREATE  TABLE  TIPO_GUIA (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_TIPO_GUIA_DESC ON TIPO_GUIA(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_TIPO_GUIA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_TIPO_GUIA
BEFORE INSERT ON TIPO_GUIA 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_TIPO_GUIA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END; 

http://g500603svgjm:8080/ServicioLoginSoporteIntegral-0.0.1/api/auth?user=&pass=



-- -----------------------------------------------------
-- Table TIPO_CUMPLIMIENTO
-- -----------------------------------------------------
CREATE  TABLE  TIPO_CUMPLIMIENTO (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_TIPO_GUIA_DESC ON TIPO_CUMPLIMIENTO(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_TIPO_CUMPLIMIENTO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_TIPO_CUMPLIMIENTO
BEFORE INSERT ON TIPO_CUMPLIMIENTO 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_TIPO_CUMPLIMIENTO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END; 



-- -----------------------------------------------------
-- Table HORARIO
-- -----------------------------------------------------
CREATE  TABLE  HORARIO (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_HORARIO_DESC ON HORARIO(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_HORARIO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_HORARIO
BEFORE INSERT ON HORARIO 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_HORARIO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END; 



-- -----------------------------------------------------
-- Table VENTA_EMPRESA
-- -----------------------------------------------------
CREATE  TABLE  VENTA_EMPRESA (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_VENTA_EMPRESA_DESC ON VENTA_EMPRESA(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_VENTA_EMPRESA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_VENTA_EMPRESA
BEFORE INSERT ON VENTA_EMPRESA 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_VENTA_EMPRESA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END; 

-- -----------------------------------------------------
-- Table CUMPLIMIENTO_KPIWEB
-- -----------------------------------------------------

  CREATE TABLE CUMPLIMIENTO_KPIWEB (
	
	ID INT NOT NULL, 
	ID_CUMPLE INT NOT NULL,
	ID_CUMPLE_RESUMEN INT NOT NULL,
	ID_CUMPLIMIENTO_2 INT NOT NULL, 
	ID_RESPONSABLE INT NOT NULL,
	ID_TIPO_ORDEN INT NOT NULL, 
	ID_TIPO_VENTA INT NOT NULL,
	ID_CLIENTE_RETIRA INT NOT NULL, 
	ID_DESC_EMP INT NOT NULL,
	ID_TIPOGUI INT NOT NULL,
	ID_HORARIO INT NOT NULL,
	ID_VENTA_EMPRESA INT NOT NULL,
  TIPO_CUMPLIMIENTO INT DEFAULT 3 NOT NULL, 
	FECHA_COMPROMISO_EOM VARCHAR2(10), 
	PRIMARY KEY (ID) ,
	
	CONSTRAINT FK_ID_CUMPLE_C_KPIWEB
    FOREIGN KEY (ID_CUMPLE )
    REFERENCES ESTADO_CUMPLE (id ),
	
	CONSTRAINT FK_ID_CUMPLE_RESUMEN_C_KPIWEB
    FOREIGN KEY (ID_CUMPLE_RESUMEN )
    REFERENCES ESTADO_CUMPLE_RESUMEN (id ),
	
	CONSTRAINT FK_ID_CUMPLIMIENTO_2_C_KPIWEB
    FOREIGN KEY (ID_CUMPLIMIENTO_2 )
    REFERENCES ESTADO_CUMPLIMIENTO (id ),
	
	CONSTRAINT FK_ID_RESPONSABLE_C_KPIWEB
    FOREIGN KEY (ID_RESPONSABLE )
    REFERENCES ESTADO_RESPONSABLE (id ),
	
	CONSTRAINT FK_ID_TIPO_ORDEN_C_KPIWEB
    FOREIGN KEY (ID_TIPO_ORDEN )
    REFERENCES TIPO_ORDEN (id ),
	
	CONSTRAINT FK_ID_TIPO_VENTA_C_KPIWEB
    FOREIGN KEY (ID_TIPO_VENTA )
    REFERENCES TIPO_VENTA (id ),
	
	
	CONSTRAINT FK_ID_CLIENTE_RETIRA_C_KPIWEB
    FOREIGN KEY (ID_CLIENTE_RETIRA )
    REFERENCES CLIENTE_RETIRA (id ),
	
	CONSTRAINT FK_ID_DESC_EMP_C_KPIWEB
    FOREIGN KEY (ID_DESC_EMP )
    REFERENCES DESCRIPCION_EMPRESA (id ),
	
	
	CONSTRAINT FK_ID_TIPOGUI_C_KPIWEB
    FOREIGN KEY (ID_TIPOGUI )
    REFERENCES TIPO_GUIA (id ),
	
	CONSTRAINT FK_ID_HORARIO_C_KPIWEB
    FOREIGN KEY (ID_HORARIO )
    REFERENCES HORARIO (id ),
	
	CONSTRAINT FK_ID_VENTA_EMPRESA_C_KPIWEB
    FOREIGN KEY (ID_VENTA_EMPRESA )
    REFERENCES VENTA_EMPRESA (id ), 

    CONSTRAINT FK_TIPO_CUMPLIMIENTO_KPIWEB
    FOREIGN KEY (TIPO_CUMPLIMIENTO )
    REFERENCES TIPO_CUMPLIMIENTO (id )
	
  );
 
CREATE  INDEX INDEX_FECHA_COMPROMISO_EOM_CKW ON CUMPLIMIENTO_KPIWEB(FECHA_COMPROMISO_EOM ASC);
CREATE  INDEX INDEX_ID_CLIENTE_RETIRA_CKW ON CUMPLIMIENTO_KPIWEB(ID_CLIENTE_RETIRA ASC);
CREATE  INDEX INDEX_ID_CUMPLE_CKW ON CUMPLIMIENTO_KPIWEB(ID_CUMPLE ASC);

CREATE  INDEX INDEX_ID_CUMPLE_RESUMEN_CKW ON CUMPLIMIENTO_KPIWEB(ID_CUMPLE_RESUMEN ASC);
CREATE  INDEX INDEX_ID_CUMPLIMIENTO_2_CKW ON CUMPLIMIENTO_KPIWEB(CUMPLIMIENTO_KPIWEB ASC);
CREATE  INDEX INDEX_ID_DESC_EMP_CKW ON CUMPLIMIENTO_KPIWEB(ID_DESC_EMP ASC);
CREATE  INDEX INDEX_ID_HORARIO_CKW ON CUMPLIMIENTO_KPIWEB(ID_HORARIO ASC);
CREATE  INDEX INDEX_ID_RESPONSABLE_CKW ON CUMPLIMIENTO_KPIWEB(ID_RESPONSABLE ASC);
CREATE  INDEX INDEX_ID_TIPOGUI_CKW ON CUMPLIMIENTO_KPIWEB(ID_TIPOGUI ASC);
CREATE  INDEX INDEX_ID_TIPO_ORDEN_CKW ON CUMPLIMIENTO_KPIWEB(ID_TIPO_ORDEN ASC);
CREATE  INDEX INDEX_ID_TIPO_VENTA_CKW ON CUMPLIMIENTO_KPIWEB(ID_TIPO_VENTA ASC);
CREATE  INDEX INDEX_ID_VENTA_EMPRESA_CKW ON CUMPLIMIENTO_KPIWEB(ID_VENTA_EMPRESA ASC);


CREATE SEQUENCE SEQUENCE_CUMPLIMIENTO_KPIWEB INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE OR REPLACE TRIGGER TRIGGER_CUMPLIMIENTO_KPIWEB
BEFORE INSERT ON CUMPLIMIENTO_KPIWEB
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUMPLIMIENTO_KPIWEB.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

 

-- -----------------------------------------------------
-- Table CUMPLIMIENTO_KPIWEB_ESTATICO
-- -----------------------------------------------------

  CREATE TABLE CUMPLIMIENTO_KPIWEB_ESTATICO (
	
	ID INT NOT NULL, 
	ID_CUMPLE INT NOT NULL,
	ID_CUMPLE_RESUMEN INT NOT NULL,
	ID_CUMPLIMIENTO_2 INT NOT NULL, 
	ID_RESPONSABLE INT NOT NULL,
	ID_TIPO_ORDEN INT NOT NULL, 
	ID_TIPO_VENTA INT NOT NULL,
	ID_CLIENTE_RETIRA INT NOT NULL, 
	ID_DESC_EMP INT NOT NULL,
	ID_TIPOGUI INT NOT NULL,
	ID_HORARIO INT NOT NULL,
	ID_VENTA_EMPRESA INT NOT NULL,
	FECHA_COMPROMISO_EOM VARCHAR2(10), 
	PRIMARY KEY (ID) ,
	
	CONSTRAINT FK_ID_CUMPLE_C_KPIWEB_EST
    FOREIGN KEY (ID_CUMPLE )
    REFERENCES ESTADO_CUMPLE (id ),
	
	CONSTRAINT FK_ID_CUMPLE_RESUMEN_C_KPIWEB_EST
    FOREIGN KEY (ID_CUMPLE_RESUMEN )
    REFERENCES ESTADO_CUMPLE_RESUMEN (id ),
	
	CONSTRAINT FK_ID_CUMPLIMIENTO_2_C_KPIWEB_EST
    FOREIGN KEY (ID_CUMPLIMIENTO_2 )
    REFERENCES ESTADO_CUMPLIMIENTO (id ),
	
	CONSTRAINT FK_ID_RESPONSABLE_C_KPIWEB
    FOREIGN KEY (ID_RESPONSABLE )
    REFERENCES ESTADO_RESPONSABLE (id ),
	
	CONSTRAINT FK_ID_TIPO_ORDEN_C_KPIWEB_EST
    FOREIGN KEY (ID_TIPO_ORDEN )
    REFERENCES TIPO_ORDEN (id ),
	
	CONSTRAINT FK_ID_TIPO_VENTA_C_KPIWEB_EST
    FOREIGN KEY (ID_TIPO_VENTA )
    REFERENCES TIPO_VENTA (id ),
	
	
	CONSTRAINT FK_ID_CLIENTE_RETIRA_C_KPIWEB_EST
    FOREIGN KEY (ID_CLIENTE_RETIRA )
    REFERENCES CLIENTE_RETIRA (id ),
	
	CONSTRAINT FK_ID_DESC_EMP_C_KPIWEB_EST
    FOREIGN KEY (ID_DESC_EMP )
    REFERENCES DESCRIPCION_EMPRESA (id ),
	
	
	CONSTRAINT FK_ID_TIPOGUI_C_KPIWEB_EST
    FOREIGN KEY (ID_TIPOGUI )
    REFERENCES TIPO_GUIA (id ),
	
	CONSTRAINT FK_ID_HORARIO_C_KPIWEB_EST
    FOREIGN KEY (ID_HORARIO )
    REFERENCES HORARIO (id ),
	
	CONSTRAINT FK_ID_VENTA_EMPRESA_C_KPIWEB_EST
    FOREIGN KEY (ID_VENTA_EMPRESA )
    REFERENCES VENTA_EMPRESA (id )
	
  );
 
CREATE  INDEX IDX_CUMPLE_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_CUMPLE_RESUMEN_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_CUMPLIMIENTO_2_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_RESPONSABLE_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_TIPO_ORDEN_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_TIPO_VENTA_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_CLIENTE_RETIRA_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_DESC_EMP_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_TIPOGUI_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_HORARIO_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_VENTA_EMPRESA_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);
CREATE  INDEX IDX_VENTA_EMPRESA_C_KPIWEB_EST ON CUMPLIMIENTO_KPIWEB_ESTATICO(ID ASC);


   
 
CREATE SEQUENCE SEQUENCE_CUMPLIMIENTO_KPIWEB_ESTATICO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE OR REPLACE TRIGGER TRIGGER_CUMPLIMIENTO_KPIWEB_ESTATICO
BEFORE INSERT ON CUMPLIMIENTO_KPIWEB_ESTATICO
FOR EACH ROW
BEGIN
	-- Column "id" CUMPLIMIENTO_KPIWEB_ESTATICO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUMPLIMIENTO_KPIWEB_ESTATICO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;
 
 
CREATE  TABLE  sku_servicio (
  id INT NOT NULL,
  inumbr INT NOT NULL,
  PRSDEP INT NOT NULL,
  PRSSDP INT NOT NULL,
  PRSCLA INT NOT NULL,
  PRSVND INT NOT NULL,
  prstip VARCHAR(20) NOT NULL ,
  CONSTRAINT sku_servicio_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_sku_servicio INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER sku_servicio 
BEFORE INSERT ON sku_servicio 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_sku_servicio.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

 
-- -----------------------------------------------------
-- Table CUMPLIMIENTO_ESTATICO_WS
-- -----------------------------------------------------
CREATE  TABLE  CUMPLIMIENTO_ESTATICO_WS (
  id INT NOT NULL,
  DESCRIPTION_CUMPLE VARCHAR(30) NOT NULL,
  CANTIDAD_CUMPLE INT NOT NULL,
  PORCENTAJE_CUMPLE FLOAT(126) NOT NULL,
  DESCRIPTION_ATRASADO VARCHAR(30) NOT NULL,
  CANTIDAD_ATRASADO INT NOT NULL,
  PORCENTAJE_ATRASADO FLOAT(126) NOT NULL,
  DESCRIPTION_NO_CUMPLE VARCHAR(30) NOT NULL,
  CANTIDAD_NO_CUMPLE INT NOT NULL,
  PORCENTAJE_NO_CUMPLE FLOAT(126) NOT NULL,
  CANTIDAD_TOTAL INT NOT NULL,
  PORCENTAJE_TOTAL FLOAT(126) NOT NULL,
  FECHA_COMPROMISO_EOM VARCHAR(15) NOT NULL,
  PRIMARY KEY (id) 
);

CREATE SEQUENCE SEQUENCE_CUMPLIMIENTO_ES_WS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_CUMPLIMIENTO_ES_WS
BEFORE INSERT ON CUMPLIMIENTO_ESTATICO_WS 
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_CUMPLIMIENTO_ES_WS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table SKU_SERVICIO_WS
-- -----------------------------------------------------
CREATE  TABLE  SKU_SERVICIO_WS (
  id INT NOT NULL,
  INUMBR INT NOT NULL,
  PRSDEP INT NOT NULL,
  PRSSDP INT NOT NULL,
  PRSCLA INT NOT NULL,
  PRSVND INT NOT NULL,
  prstip VARCHAR(30) NOT NULL,
  PRIMARY KEY (id) 
);


CREATE SEQUENCE SEQUENCE_SKU_SERVICIO_WS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_SKU_SERVICIO_WS
BEFORE INSERT ON SKU_SERVICIO_WS
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_SKU_SERVICIO_WS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

allOrdeneStockPendientes


-- -----------------------------------------------------
-- Table ORDENES_STOCK_PENDIENTES
-- -----------------------------------------------------
CREATE  TABLE  ORDENES_STOCK_PENDIENTES (
  id INT NOT NULL,
  ORDEN INT NOT NULL,
  NRO_DE_LINEA VARCHAR(30) NOT NULL,
  DO_DTL_STATUS VARCHAR(30) NOT NULL,
  TIPOORDEN VARCHAR(30) NOT NULL,
  PEDIDO VARCHAR(30) NOT NULL,
  SKU VARCHAR(30) NOT NULL,
  CANTIDAD_PENDIENTE VARCHAR(30) NOT NULL,
  BODEGA VARCHAR(30) NOT NULL,
  FECHA_CREACION VARCHAR(30) NOT NULL,
  STAT_CODE  INT NOT NULL,
  ESTADO  INT NOT NULL,
  DISTRO_NBR  VARCHAR(40) NULL,
  PO_NBR  VARCHAR(40) NULL,
  SIZE_DESC  VARCHAR(40) NULL,
  SHPD_QTY  VARCHAR(40) NULL,
  TC_ORDER_ID  INT NOT NULL,
  CANTIDAD_DESPACHADA  INT NOT NULL,
  CANTIDAD_ORDENADA  INT NOT NULL,
  ORDERID  INT NOT NULL,
  ORDERLINEID  INT NOT NULL,
  EQUALS_QHPD_DESPACHA  VARCHAR(20) NULL,
  
  PRIMARY KEY (id) 
);


CREATE SEQUENCE SEQUENCE_ORDENES_S_PENDIENTE INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_SEQUENCE_ORDENES_S_PENDIENTE
BEFORE INSERT ON ORDENES_STOCK_PENDIENTES
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_ORDENES_S_PENDIENTE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- TABLA PENDIENTE
-- Table CUADRATURA_INVENTARIO
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_INVENTARIO (
  id INT NOT NULL,
  FECHA_CALCULADO TIMESTAMP,
  TOTAL INT NOT NULL,
  ASN INT NOT NULL,
  CANT INT NOT NULL,
  DIF INT NOT NULL,
  ESTADO VARCHAR(300) NOT NULL,
  PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_CUADRATURA_INVENTARIO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_CUADRATURA_INVENTARIO
BEFORE INSERT ON CUADRATURA_INVENTARIO 
FOR EACH ROW
BEGIN
	SELECT SEQUENCE_CUADRATURA_INVENTARIO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- TABLA PENDIENTE
-- Table CUADRATURA_OC_WMS
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_WMS (

id INT NOT NULL,
REF_FIELD_1 VARCHAR(255), 
TRAN_NBR VARCHAR(255), 
MOD_DATE_TIME VARCHAR(255), 
UNITS_RCVD VARCHAR(255), 
WHSE VARCHAR(255), 
TRAN_TYPE VARCHAR(255), 
TRAN_CODE VARCHAR(255), 
PRIMARY KEY (id) 
);


CREATE  INDEX IDX_OC_WMS_REF_FIELD_1 ON CUADRATURA_OC_WMS(REF_FIELD_1 ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_NBR ON CUADRATURA_OC_WMS(TRAN_NBR ASC);
CREATE  INDEX IDX_OC_WMS_MOD_DATE_TIME ON CUADRATURA_OC_WMS(MOD_DATE_TIME ASC);
CREATE  INDEX IDX_OC_WMS_UNITS_RCVD ON CUADRATURA_OC_WMS(UNITS_RCVD ASC);
CREATE  INDEX IDX_OC_WMS_WHSE ON CUADRATURA_OC_WMS(WHSE ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_TYPE ON CUADRATURA_OC_WMS(TRAN_TYPE ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_CODE ON CUADRATURA_OC_WMS(TRAN_CODE ASC);


CREATE SEQUENCE SEQUENCE_CUADRATURA_OC_WMS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CUADRATURA_OC_WMS
BEFORE INSERT ON CUADRATURA_OC_WMS 
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUADRATURA_OC_WMS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- TABLA PENDIENTE
-- Table CUADRATURA_OC_JDA
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_JDA (

id INT NOT NULL,
PORDAT VARCHAR(255), 
CITAAN VARCHAR(255), 
POUNTS VARCHAR(255), 
POLOC VARCHAR(255), 
PONUMB VARCHAR(255), 
PONRCV VARCHAR(255), 
PRIMARY KEY (id) 
);



CREATE  INDEX IDX_OC_JDA_PORDAT ON CUADRATURA_OC_JDA(PORDAT ASC);
CREATE  INDEX IDX_OC_JDA_CITAAN ON CUADRATURA_OC_JDA(CITAAN ASC);
CREATE  INDEX IDX_OC_JDA_POUNTS ON CUADRATURA_OC_JDA(POUNTS ASC);
CREATE  INDEX IDX_OC_JDA_POLOC ON CUADRATURA_OC_JDA(POLOC ASC);
CREATE  INDEX IDX_OC_JDA_PONUMB ON CUADRATURA_OC_JDA(PONUMB ASC);
CREATE  INDEX IDX_OC_JDA_PONRCV ON CUADRATURA_OC_JDA(PONRCV ASC);


CREATE SEQUENCE SEQUENCE_CUADRATURA_OC_JDA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CUADRATURA_OC_JDA
BEFORE INSERT ON CUADRATURA_OC_JDA 
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_JDA sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUADRATURA_OC_JDA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- TABLA PENDIENTE
-- Table INVENTARIO_JDA
-- -----------------------------------------------------
  CREATE TABLE INVENTARIO_JDA (	
  ID INT NOT NULL, 
	PORDAT VARCHAR(255) NOT NULL, 
	CITAAN VARCHAR(255) NOT NULL, 
	POUNTS VARCHAR(255) NOT NULL, 
	POLOC VARCHAR(255) NOT NULL, 
	PONUMB VARCHAR(255) NOT NULL, 
	PONRCV VARCHAR(255) NOT NULL, 
	PRIMARY KEY (ID)
  );


CREATE SEQUENCE SEQUENCE_INVENTARIO_JDA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE OR REPLACE TRIGGER TRIGGER_INVENTARIO_JDA
BEFORE INSERT ON CUMPLIMIENTO_INVENTARIO_JDA
FOR EACH ROW
BEGIN
	-- Column "id" CUMPLIMIENTO_KPIWEB_ESTATICO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_INVENTARIO_JDA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- TABLA PENDIENTE
-- Table CUADRATURA_OC_INVENTARIO
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_INVENTARIO (

id INT NOT NULL,
FECHA_CALCULADO TIMESTAMP, 
REF_FIELD_1 VARCHAR(255), 
TOTAL INT NOT NULL, 
ASN INT NOT NULL, 
CANT INT NOT NULL, 
DIF INT NOT NULL, 
ESTADO VARCHAR(255), 
PRIMARY KEY (id) 
);


CREATE  INDEX IDX_OC_INVENTARIO_FECHA_CALCULADO ON CUADRATURA_OC_INVENTARIO(FECHA_CALCULADO ASC);
CREATE  INDEX IDX_OC_INVENTARIO_REF_FIELD_1 ON CUADRATURA_OC_INVENTARIO(REF_FIELD_1 ASC);
CREATE  INDEX IDX_OC_INVENTARIO_TOTAL ON CUADRATURA_OC_INVENTARIO(TOTAL ASC);
CREATE  INDEX IDX_OC_INVENTARIO_ASN ON CUADRATURA_OC_INVENTARIO(ASN ASC);
CREATE  INDEX IDX_OC_INVENTARIO_CANT ON CUADRATURA_OC_INVENTARIO(CANT ASC);
CREATE  INDEX IDX_OC_INVENTARIO_DIF ON CUADRATURA_OC_INVENTARIO(DIF ASC);
CREATE  INDEX IDX_OC_INVENTARIO_ESTADO ON CUADRATURA_OC_INVENTARIO(ESTADO ASC);


CREATE SEQUENCE SEQUENCE_C_OC_INVENTARIO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_C_OC_INVENTARIO
BEFORE INSERT ON CUADRATURA_OC_INVENTARIO 
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_JDA sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_C_OC_INVENTARIO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table TIPO_ESTADO_OC_VTAV
-- -----------------------------------------------------
CREATE  TABLE  TIPO_ESTADO_OC_VTAV (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_TIPO_ESTADO_OC_VTAV INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_TIPO_ESTADO_OC_VTAV
BEFORE INSERT ON TIPO_ESTADO_OC_VTAV 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_TIPO_ESTADO_OC_VTAV.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table TIPO_ESTADO_OC_VTAV
-- -----------------------------------------------------
CREATE  TABLE  TIPO_ESTADO_OC_VTAV_STOCK (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_TIPO_ESTADO_STOCK INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_TIPO_ESTADO_STOCK
BEFORE INSERT ON TIPO_ESTADO_OC_VTAV_STOCK 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_TIPO_ESTADO_STOCK.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table CUADRATURA_OC_VTAV_EOM
-- -----------------------------------------------------

CREATE  TABLE  CUADRATURA_OC_VTAV_EOM (

id INT NOT NULL,
SOLICITUDORIGINAL VARCHAR(255), 
N_ORDEN_DISTRIBU VARCHAR(255), 
SOLICITUD VARCHAR(255), 
FECHA_CREACION_ORDEN VARCHAR(255), 
ORIGEN VARCHAR(255), 
CANCELADO VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_OC_WMS_REF_FIELD_1 ON CUADRATURA_OC_WMS(REF_FIELD_1 ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_NBR ON CUADRATURA_OC_WMS(TRAN_NBR ASC);
CREATE  INDEX IDX_OC_WMS_MOD_DATE_TIME ON CUADRATURA_OC_WMS(MOD_DATE_TIME ASC);
CREATE  INDEX IDX_OC_WMS_UNITS_RCVD ON CUADRATURA_OC_WMS(UNITS_RCVD ASC);
CREATE  INDEX IDX_OC_WMS_WHSE ON CUADRATURA_OC_WMS(WHSE ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_TYPE ON CUADRATURA_OC_WMS(TRAN_TYPE ASC);
CREATE  INDEX IDX_OC_WMS_TRAN_CODE ON CUADRATURA_OC_WMS(TRAN_CODE ASC);


CREATE SEQUENCE SEQUENCE_C_OC_VTAV_EOM INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
CREATE OR REPLACE TRIGGER TRIGGER_C_OC_VTAV_EOM
BEFORE INSERT ON CUADRATURA_OC_VTAV_EOM 
FOR EACH ROW
BEGIN
	-- Column "id" CUADRATURA_VENTAV sequence SEQUENCE_CUADRATURA_VENTAV
	SELECT SEQUENCE_C_OC_VTAV_EOM.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;





-- -----------------------------------------------------
-- Table CUADRATURA_OC_VTAV_JDA
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_VTAV_JDA (

id INT NOT NULL,
PONUMB VARCHAR(255), 
POVNUM VARCHAR(255), 
NUMDO VARCHAR(255), 
POFECE VARCHAR(255), 
POHORE VARCHAR(255), 
EX14ERROR VARCHAR(255), 
EX14FREGi VARCHAR(255), 
DESPA VARCHAR(255), 
PRIMARY KEY (id) 
);


CREATE  INDEX IDX_OC_VTAV_PONUMB ON CUADRATURA_OC_VTAV_JDA(PONUMB ASC);
CREATE  INDEX IDX_OC_VTAV_POVNUM ON CUADRATURA_OC_VTAV_JDA(POVNUM ASC);
CREATE  INDEX IDX_OC_VTAV_NUMDO ON CUADRATURA_OC_VTAV_JDA(NUMDO ASC);
CREATE  INDEX IDX_OC_VTAV_POFECE ON CUADRATURA_OC_VTAV_JDA(POFECE ASC);
CREATE  INDEX IDX_OC_VTAV_POHORE ON CUADRATURA_OC_VTAV_JDA(POHORE ASC);
CREATE  INDEX IDX_OC_VTAV_EX14ERROR ON CUADRATURA_OC_VTAV_JDA(EX14ERROR ASC);
CREATE  INDEX IDX_OC_VTAV_EX14FREGi ON CUADRATURA_OC_VTAV_JDA(EX14FREGi ASC);
CREATE  INDEX IDX_OC_VTAV_DESPA ON CUADRATURA_OC_VTAV_JDA(DESPA ASC);



CREATE SEQUENCE SEQUENCE_OC_VTAV_JDA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_OC_VTAV_JDA
BEFORE INSERT ON CUADRATURA_OC_VTAV_JDA 
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_OC_VTAV_JDA.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table CUADRATURA_OC_VTAV_JDA_STOCK
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_VTAV_JDA_STOCK (

id INT NOT NULL,
PONUMB VARCHAR(255), 
POVNUM VARCHAR(255), 
NUMDO VARCHAR(255), 
POFECE VARCHAR(255), 
POHORE VARCHAR(255), 
EX14ERROR VARCHAR(255), 
EX14FREGi VARCHAR(255), 
DESPA VARCHAR(255), 
PRIMARY KEY (id) 
);


CREATE  INDEX IDX_OC_VTAV_PONUMB_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(PONUMB ASC);
CREATE  INDEX IDX_OC_VTAV_POVNUM_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(POVNUM ASC);
CREATE  INDEX IDX_OC_VTAV_NUMDO_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(NUMDO ASC);
CREATE  INDEX IDX_OC_VTAV_POFECE_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(POFECE ASC);
CREATE  INDEX IDX_OC_VTAV_POHORE_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(POHORE ASC);
CREATE  INDEX IDX_OC_VTAV_EX14ERROR_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(EX14ERROR ASC);
CREATE  INDEX IDX_OC_VTAV_EX14FREGi_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(EX14FREGi ASC);
CREATE  INDEX IDX_OC_VTAV_DESPA_STOCK ON CUADRATURA_OC_VTAV_JDA_STOCK(DESPA ASC);





CREATE SEQUENCE SEQUENCE_OC_VTAV_JDA_STOCK INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_OC_VTAV_JDA_STOCK
BEFORE INSERT ON CUADRATURA_OC_VTAV_JDA_STOCK 
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_OC_VTAV_JDA_STOCK.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table HORARIO_DE_ACTUALIZACION
-- -----------------------------------------------------
CREATE  TABLE  HORARIO_VTAV_ACT (

id INT NOT NULL,
FECHA VARCHAR(255), 
ESTADO VARCHAR(255), 
PRIMARY KEY (id) 
);

--CREATE  INDEX FK_HORARIO_VTAV_ACT ON HORARIO_DE_ACTUALIZACION(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_HORARIO_VTAV_ACT INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_HORARIO_VTAV_ACT
BEFORE INSERT ON HORARIO_VTAV_ACT 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_HORARIO_VTAV_ACT.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table HORARIO_VTAV_ACT_STOCK
-- -----------------------------------------------------
CREATE  TABLE  HORARIO_VTAV_ACT_STOCK (

id INT NOT NULL,
FECHA VARCHAR(255), 
ESTADO VARCHAR(255), 
PRIMARY KEY (id) 
);

--CREATE  INDEX FK_HORARIO_VTAV_ACT ON HORARIO_DE_ACTUALIZACION(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_HORARIO_VTAV_ACT_S INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_HORARIO_VTAV_ACT_STOCK
BEFORE INSERT ON HORARIO_VTAV_ACT_STOCK 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_HORARIO_VTAV_ACT_STOCK.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;




-- -----------------------------------------------------
-- Table HORARIO_TRAZABILIDAD_ACT
-- -----------------------------------------------------
CREATE  TABLE  HORARIO_TRAZABILIDAD_ACT (

id INT NOT NULL,
FECHA VARCHAR(255), 
ESTADO VARCHAR(255), 
PRIMARY KEY (id) 
);

--CREATE  INDEX FK_HORARIO_VTAV_ACT ON HORARIO_DE_ACTUALIZACION(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_HORARIO_TRAZA_ACT INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_HORARIO_TRAZA_ACT
BEFORE INSERT ON HORARIO_TRAZABILIDAD_ACT 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_HORARIO_TRAZA_ACT.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;




-- -----------------------------------------------------
-- Table CUADRATURA_OC_VTAV_COMP
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_VTAV_COMP (

id INT NOT NULL,
RELNUM FLOAT(126), 
POMUMB FLOAT(126), 
INUMBR FLOAT(126), 
RELBL5 INT, 
CANTIDAD_COMP1 INT, 
CANTIDAD_COMP2 INT, 
FECHA_INGRESO VARCHAR(20) 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_C_OC_VTAV_COMP_C_COMP1 ON CUADRATURA_OC_VTAV_COMP(CANTIDAD_COMP1 ASC);
CREATE  INDEX IDX_C_OC_VTAV_COMP_C_COMP2 ON CUADRATURA_OC_VTAV_COMP(CANTIDAD_COMP2 ASC);
CREATE  INDEX IDX_C_OC_VTAV_COMP_INUMBR ON CUADRATURA_OC_VTAV_COMP(INUMBR ASC);
CREATE  INDEX IDX_C_OC_VTAV_COMP_POMUMB ON CUADRATURA_OC_VTAV_COMP(POMUMB ASC);
CREATE  INDEX IDX_C_OC_VTAV_COMP_RELBL5 ON CUADRATURA_OC_VTAV_COMP(RELBL5 ASC);
CREATE  INDEX IDX_C_OC_VTAV_COMP_RELNUM ON CUADRATURA_OC_VTAV_COMP(RELNUM ASC);



CREATE SEQUENCE SEQUENCE_C_OC_VTAV_COMP INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_C_OC_VTAV_COMP
BEFORE INSERT ON CUADRATURA_OC_VTAV_COMP
FOR EACH ROW
BEGIN
  -- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
  SELECT SEQUENCE_C_OC_VTAV_COMP.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;




-- -----------------------------------------------------
-- Table CUADRATURA_OC_VTAV_COMPARATIVO
-- -----------------------------------------------------
CREATE  TABLE  CUADRATURA_OC_VTAV_COMPARATIVO (

id INT NOT NULL,
SolicitudOriginal VARCHAR(255), 
N_Orden_Distribu VARCHAR(255), 
Solicitud VARCHAR(255), 
Fecha_Creacion_Orden VARCHAR(255), 
Cancelado VARCHAR(255), 
Estado VARCHAR(255), 
PONUMB VARCHAR(255), 
POVNUM VARCHAR(255), 
NUMDO VARCHAR(255), 
POFECE VARCHAR(255), 
POHORE VARCHAR(255), 
EX14ERROR VARCHAR(255), 
EX14FREGI VARCHAR(255), 
DESPA VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_OC_VTAV_COM_SOLIC_OR ON CUADRATURA_OC_VTAV_COMPARATIVO(SolicitudOriginal ASC);
CREATE  INDEX IDX_OC_VTAV_COM_OC ON CUADRATURA_OC_VTAV_COMPARATIVO(N_Orden_Distribu ASC);
CREATE  INDEX IDX_OC_VTAV_COM_SOLIC ON CUADRATURA_OC_VTAV_COMPARATIVO(Solicitud ASC);
CREATE  INDEX IDX_OC_VTAV_COM_FECHA ON CUADRATURA_OC_VTAV_COMPARATIVO(Fecha_Creacion_Orden ASC);
CREATE  INDEX IDX_OC_VTAV_COM_CANCEL ON CUADRATURA_OC_VTAV_COMPARATIVO(Cancelado ASC);
CREATE  INDEX IDX_OC_VTAV_COM_ESTADO ON CUADRATURA_OC_VTAV_COMPARATIVO(Estado ASC);
CREATE  INDEX IDX_OC_VTAV_COM_PONUMB ON CUADRATURA_OC_VTAV_COMPARATIVO(PONUMB ASC);
CREATE  INDEX IDX_OC_VTAV_COM_POVNUM ON CUADRATURA_OC_VTAV_COMPARATIVO(POVNUM ASC);
CREATE  INDEX IDX_OC_VTAV_COM_NUMDO ON CUADRATURA_OC_VTAV_COMPARATIVO(NUMDO ASC);
CREATE  INDEX IDX_OC_VTAV_COM_NUMDO ON CUADRATURA_OC_VTAV_COMPARATIVO(POFECE ASC);
CREATE  INDEX IDX_OC_VTAV_COM_POHORE ON CUADRATURA_OC_VTAV_COMPARATIVO(POHORE ASC);
CREATE  INDEX IDX_OC_VTAV_COM_EX14ERROR ON CUADRATURA_OC_VTAV_COMPARATIVO(EX14ERROR ASC);
CREATE  INDEX IDX_OC_VTAV_COM_EX14FREGI ON CUADRATURA_OC_VTAV_COMPARATIVO(EX14FREGI ASC);
CREATE  INDEX IDX_OC_VTAV_COM_DESP ON CUADRATURA_OC_VTAV_COMPARATIVO(DESPA ASC);



CREATE SEQUENCE SEQUENCE_CUADRATURA_OC_VTAVCOM INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CUADRATURA_OC_VTAVCOM
BEFORE INSERT ON CUADRATURA_OC_VTAV_COMPARATIVO
FOR EACH ROW
BEGIN
	-- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_CUADRATURA_OC_VTAVCOM.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- TRAZABILIDAD
-- -----------------------------------------------------

  CREATE TABLE "KPIWEB"."CUADRATURA_ECOMMERCE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMORDEN" NUMBER(*,0) NOT NULL ENABLE, 
	"CODDESP" NUMBER(*,0) NOT NULL ENABLE, 
	"FECTRANTSL" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
	"NUMCTLTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMTERTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMTRANTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"PXQ" NUMBER(*,0) NOT NULL ENABLE, 
	"SKU" NUMBER(*,0) NOT NULL ENABLE, 
	"CANVEND" NUMBER(*,0) NOT NULL ENABLE, 
	"ESTORDEN" NUMBER(*,0) NOT NULL ENABLE, 
	"SUBESTOC" NUMBER(*,0) NOT NULL ENABLE, 
	"TIPVTA" NUMBER(*,0) NOT NULL ENABLE, 
	"TIPOPAG" NUMBER(*,0) NOT NULL ENABLE, 
	 CONSTRAINT "CUADRATURA_ECOMMERCE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE TRIGGER "KPIWEB"."CUADRATURA_ECOMMERCE" 
BEFORE INSERT ON CUADRATURA_ECOMMERCE 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_CUADRATURA_ECOMMERCE.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;
/
ALTER TRIGGER "KPIWEB"."CUADRATURA_ECOMMERCE" ENABLE;



  CREATE TABLE "KPIWEB"."CUADRATURA_JPDTOTDAD" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE, 
	"FECHA" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
	"LOLOCA" NUMBER(*,0) NOT NULL ENABLE, 
	"LONIVI" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
	"NUMERO_SD" NUMBER(*,0) NOT NULL ENABLE, 
	"OD_EOM" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMCORRDUP" NUMBER(*,0) NOT NULL ENABLE, 
	"SKU" NUMBER(*,0) NOT NULL ENABLE, 
	"TOTARTTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"DEPARTTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"CANARTTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"MARDESTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMTERTSL" NUMBER(*,0) NOT NULL ENABLE, 
	"NUMTRANTSL" NUMBER(*,0) NOT NULL ENABLE, 
	 CONSTRAINT "CUADRATURA_JPDTOTDAD_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE TRIGGER "KPIWEB"."TRIGGER_CUADRATURA_JPDTOTDAD" 
BEFORE INSERT ON CUADRATURA_JPDTOTDAD 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_CUADRATURA_JPDTOTDAD.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;
/
ALTER TRIGGER "KPIWEB"."TRIGGER_CUADRATURA_JPDTOTDAD" ENABLE;





  CREATE TABLE ECOMMERCE_SOPORTE_VENTA
   (
      ID INT NOT NULL, 
      NUMORDEN INT NOT NULL, 
	    CODIGO_DESPACHO INT NOT NULL, 
	   FECTRANTSL VARCHAR2(45 BYTE) NOT NULL ENABLE, 
	   NUMCTLTSL INT NOT NULL, 
	   NUMTERTSL INT NOT NULL, 
	   NUMTRANTSL INT NOT NULL, 
	   PXQ INT NOT NULL, 
	   SKU INT NOT NULL, 
	   LOLOCA INT NOT NULL, 
	   ESTORDEN INT NOT NULL, 
	   TIPO_ESTADO_OC INT NOT NULL, 
	   TIPVTA INT NOT NULL, 
	   TIPOPAG INT NOT NULL, 
	   TIPO_ESTADO INT NOT NULL, 
      TIPO_RELACION INT NOT NULL, 
    PRIMARY KEY (id) 
) ;


CREATE SEQUENCE SEQUENCE_ECOMMERCE_SVTA INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ECOMMERCE_SVTA
BEFORE INSERT ON ECOMMERCE_SOPORTE_VENTA
FOR EACH ROW
BEGIN
  -- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
  SELECT SEQUENCE_ECOMMERCE_SVTA.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;


-- -----------------------------------------------------
-- FORMULARIO PAUTA
-- -----------------------------------------------------


-- -----------------------------------------------------
-- AREAS
-- -----------------------------------------------------

CREATE  TABLE  AREAS (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT AREAS_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_AREAS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER AREAS 
BEFORE INSERT ON AREAS 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_AREAS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- CONTRATANTES
-- -----------------------------------------------------

CREATE  TABLE  CONTRATANTES (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT CONTRATANTES_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_CONTRATANTES INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER CONTRATANTES 
BEFORE INSERT ON CONTRATANTES 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_CONTRATANTES.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- GERENTES
-- -----------------------------------------------------

CREATE  TABLE  GERENTES (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT GERENTES_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_GERENTES INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER GERENTES 
BEFORE INSERT ON GERENTES 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_GERENTES.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- PADRINOS
-- -----------------------------------------------------

CREATE  TABLE  PADRINOS (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT PADRINOS_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_PADRINOS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER PADRINOS 
BEFORE INSERT ON PADRINOS 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_PADRINOS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- PRIORIDADES
-- -----------------------------------------------------

CREATE  TABLE  PRIORIDADES (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT PRIORIDADES_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_PRIORIDADES INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER PRIORIDADES 
BEFORE INSERT ON PRIORIDADES 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_PRIORIDADES.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- REPORTADOS
-- -----------------------------------------------------

CREATE  TABLE  REPORTADOS (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT REPORTADOS_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_REPORTADOS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER REPORTADOS 
BEFORE INSERT ON REPORTADOS 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_REPORTADOS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- SOPORTES
-- -----------------------------------------------------

CREATE  TABLE  SOPORTES (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT REPORTADOS_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_SOPORTES INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER SOPORTES 
BEFORE INSERT ON SOPORTES 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_SOPORTES.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- TIENDAS
-- -----------------------------------------------------

CREATE  TABLE  TIENDAS (
  id INT NOT NULL,
  description VARCHAR(45) NOT NULL ,
  id_flag INT NOT NULL,
  CONSTRAINT TIENDAS_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_TIENDAS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TIENDAS 
BEFORE INSERT ON TIENDAS 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_TIENDAS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;





-- -----------------------------------------------------
-- Table FLAG
-- -----------------------------------------------------
CREATE  TABLE  FLAG (

id INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_FLAG ON FLAG(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_FLAG INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_FLAG
BEFORE INSERT ON FLAG 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_FLAG.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


SELECT * FROM PAUTAS;



  CREATE TABLE ESTADOS
   (	

    ID INT NOT NULL , 
	   DESCRIPTION VARCHAR2(45) NOT NULL, 
	  PRIMARY KEY (ID)
);

  
 CREATE  INDEX IDX_FLAG ON FLAG(DESCRIPTION ASC); 

-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADOS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER ESTADOS
BEFORE INSERT ON ESTADOS 
FOR EACH ROW
BEGIN
  -- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
  SELECT SEQUENCE_ESTADOS.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
  


-- -----------------------------------------------------
-- PAUTAS
-- -----------------------------------------------------

CREATE  TABLE  PAUTAS (
  id INT NOT NULL,
  NUMERO_REQUERIMIENTO INT NOT NULL ,
  ID_TIENDA INT NOT NULL ,
  ID_PADRINO INT NOT NULL ,
  ID_GERENTE INT NOT NULL ,
  ID_CONTRATANTE INT NOT NULL ,
  ID_SOPORTE INT NOT NULL ,
  ID_REPORTADO INT NOT NULL ,
  ID_AREA INT NOT NULL ,
  ID_PRIORIDAD INT NOT NULL ,
  ID_ESTADO INT NOT NULL ,
  DESCRIPCION_ISSUE VARCHAR(255) NOT NULL ,
  OBSERVACION VARCHAR(255) NOT NULL ,
  FECHA_VISITA VARCHAR(15) NOT NULL ,
  CONSTRAINT PAUTAS_PK PRIMARY KEY (id) ,
  
  CONSTRAINT FK_ID_TIENDA_PAUTA
    FOREIGN KEY (ID_TIENDA )
    REFERENCES TIENDAS (id ),
	
  CONSTRAINT FK_ID_PADRINO_PAUTA
    FOREIGN KEY (ID_PADRINO )
    REFERENCES PADRINOS (id ),

  CONSTRAINT FK_ID_GERENTE_PAUTA
    FOREIGN KEY (ID_GERENTE )
    REFERENCES GERENTES (id ),	
	
  CONSTRAINT FK_ID_CONTRATANTE_PAUTA
    FOREIGN KEY (ID_CONTRATANTE )
    REFERENCES CONTRATANTES (id ),	

  CONSTRAINT FK_ID_SOPORTE_PAUTA
    FOREIGN KEY (ID_SOPORTE )
    REFERENCES SOPORTES (id ),	
	
  CONSTRAINT FK_ID_REPORTADO_PAUTA
    FOREIGN KEY (ID_REPORTADO )
    REFERENCES REPORTADOS (id ),

  CONSTRAINT FK_ID_AREA_PAUTA
    FOREIGN KEY (ID_AREA )
    REFERENCES AREAS (id ),
	
  CONSTRAINT FK_ID_PRIORIDAD_PAUTA
    FOREIGN KEY (ID_PRIORIDAD )
    REFERENCES PRIORIDADES (id ),
    
   CONSTRAINT FK_ID_ESTADO_PAUTA
    FOREIGN KEY (ID_ESTADO )
    REFERENCES ESTADOS (id ) 
	
);
CREATE SEQUENCE SEQUENCE_PAUTAS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER PAUTAS 
BEFORE INSERT ON PAUTAS 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_PAUTAS.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- PAUTAS
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table SECUENCIA
-- -----------------------------------------------------
drop table SECUENCIA;

CREATE  TABLE  SECUENCIA (
  id INT NOT NULL,
  DESCRIPTION VARCHAR(45) NOT NULL ,
  CONTADOR INT DEFAULT 0 NOT NULL ,
  FECHA VARCHAR(20) NOT NULL ,
  CONSTRAINT SECUENCIA_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SECUENCIA_SECUENCIAS INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_SECUENCIAS 
BEFORE INSERT ON SECUENCIA 
FOR EACH ROW
BEGIN
  -- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
  SELECT SECUENCIA_SECUENCIAS.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;


  CREATE TABLE cuadratura_vtav_pd
   (
      ID INT NOT NULL, 
      tc_po_line_id VARCHAR2(255) NOT NULL, 
      n_Solicitud_cliente VARCHAR2(255) NOT NULL, 
     n_orden_distribu VARCHAR2(45) NOT NULL, 
    fecha_creacion_orden VARCHAR2(20) NOT NULL, 
    fechacompromiso VARCHAR2(20) NOT NULL, 
	estorden VARCHAR2(255) NOT NULL, 
	estLineaorden VARCHAR2(255) NOT NULL, 
	estado_od VARCHAR2(255) NOT NULL, 
	sku VARCHAR2(255) NOT NULL, 
	descsku VARCHAR2(255) NOT NULL, 
	cantsku VARCHAR2(255) NOT NULL, 
	despacho VARCHAR2(255) NOT NULL, 
	tipo_orden VARCHAR2(255) NOT NULL, 
	mes VARCHAR2(255) NOT NULL, 
	ano VARCHAR2(255) NOT NULL, 
    descripcion_tipo_orden VARCHAR2(255) NOT NULL, 
	tipo_venta INT NOT NULL, 
	tipo_numero_distribuicion INT NOT NULL,  
	horario INT NOT NULL, 
	horario2 INT NOT NULL, 
    fecha_creacion VARCHAR2(255) NOT NULL, 
    PRIMARY KEY (id) 
) ;


CREATE SEQUENCE SEQUENCE_cuadratura_vtav_pd INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_cuadratura_vtav_pd
BEFORE INSERT ON CUADRATURA_cuadratura_vtav_pd
FOR EACH ROW
BEGIN
  -- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
  SELECT SEQUENCE_cuadratura_vtav_pd.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;





  CREATE TABLE cuadratura_ctl
   (
    
      ID INT NOT NULL, 
      carga INT  NULL, 
      bodega INT  NULL, 
      fecha VARCHAR2(45)  NULL, 
      tipo VARCHAR2  NULL, 
      tran_nbr INT  NULL, 
      tienda INT  NULL, 
      guias INT  NULL, 
      detalles INT  NULL, 
      cant_Wms INT  NULL, 
      procesado_jda VARCHAR2(45)  NULL, 
      encontrados INT  NULL,
      stat_code  INT  NULL,

	  PRIMARY KEY (id) 
) ;


CREATE SEQUENCE SEQUENCE_cuadratura_ctl INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_cuadratura_ctl
BEFORE INSERT ON cuadratura_ctl
FOR EACH ROW
BEGIN
  -- Column "id" INVENTARIO_WMS sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
  SELECT SEQUENCE_cuadratura_ctl.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;
Alexis,


Juan , 
nos podrias ayudar con el tema de los problemas de carga guía ya que desde de los NUMERO SOLICITUD CLIENTE que vienen desde EOM no se encuentran en beetrack

Alexis ,

Sabes que estuve revisando lo de los probelmas de carga guia se que los numero de solicitudes de cliente que vienen desde eom no se encuntran en beetrack 
la verdad es esta fuera de mi alcance para la solucion y como tu conoces el negocio bien tu crees que no puedas ayudar.
la verdad es que no he encontrar la solucion quien no podria ayudar con esto






----------------
CREATE  TABLE IF NOT EXISTS `trazabilidad`.`cuadratura_venta_verde`   (
   
      ID INT NOT NULL AUTO_INCREMENT, 
    SOLICITUDORIGINAL VARCHAR(255) NOT NULL, 
    N_ORDEN_DISTRIBU VARCHAR(255) NOT NULL, 
    FECHA_CREACION_ORDEN VARCHAR(45) NOT NULL, 
    PONUMB VARCHAR(255) NOT NULL, 
    EX14ERROR VARCHAR (255) NOT NULL, 
    DESPA VARCHAR (255) NOT NULL, 
    TIPO_ESTADO INT NOT NULL, 
    TIPO_RELACION INT NOT NULL, 
    RELNUM VARCHAR2(255) NOT NULL, 
    INUMBR VARCHAR2(255) NOT NULL, 
    RELBL5 VARCHAR2(255) NOT NULL, 
    LOGENCONTRADOENJDA VARCHAR2(255) NOT NULL, 

  
    PRIMARY KEY (id) 
) ;





-- -----------------------------------------------------
-- Table ESTADO_OD
-- -----------------------------------------------------
CREATE  TABLE  ESTADO_OD (

id INT NOT NULL,
CODIGO INT NOT NULL,
DESCRIPTION VARCHAR(255), 
PRIMARY KEY (id) 
);

CREATE  INDEX IDX_ESTADO_OD ON ESTADO_OD(DESCRIPTION ASC); 


-- CREATE  UNIQUE INDEX rut_UNIQUE ON commerce(rut ASC); 
-- CREATE  INDEX fk_economic_activity_idx ON commerce(id_actividad_economica ASC); 

CREATE SEQUENCE SEQUENCE_ESTADO_OD INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_OD
BEFORE INSERT ON ESTADO_OD 
FOR EACH ROW
BEGIN
	-- Column "id" KPI_WEB_CUMPLIMIENTO sequence SEQUENCE_KPI_WEB_CUMPLIMIENTO
	SELECT SEQUENCE_ESTADO_OD.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table estado_ctl
-- -----------------------------------------------------
drop table estado_ctl;

CREATE  TABLE  estado_ctl (
  id INT NOT NULL,
  codigo VARCHAR(45) NOT NULL ,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT estado_ctl_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_ESTADO_CTL INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_ESTADO_CTL 
BEFORE INSERT ON ESTADO_CTL 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_ESTADO_CTL.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;


-- -----------------------------------------------------
-- Table BODEGA_CTL
-- -----------------------------------------------------
drop table BODEGA_CTL;

CREATE  TABLE  BODEGA_CTL (
  id INT NOT NULL,
  codigo VARCHAR(45) NOT NULL ,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT bodega_ctl_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_BODEGA_CTL INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_BODEGA_CTL 
BEFORE INSERT ON BODEGA_CTL 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_BODEGA_CTL.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table BODEGA_CTL
-- -----------------------------------------------------
drop table BODEGA_CTL;

CREATE  TABLE  BODEGA_CTL (
  id INT NOT NULL,
  codigo VARCHAR(45) NOT NULL ,
  description VARCHAR(45) NOT NULL ,
  CONSTRAINT bodega_ctl_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_BODEGA_CTL INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_BODEGA_CTL 
BEFORE INSERT ON BODEGA_CTL 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_BODEGA_CTL.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;



-- -----------------------------------------------------
-- Table CUADRATURA_DO
-- -----------------------------------------------------
DROP TABLE CUADRATURA_DO;
select * from CUADRATURA_DO;
CREATE  TABLE  CUADRATURA_DO (
  ID INT  NULL,
  ORDENNUM  INT   NULL ,
  EST_SC  INT  NULL ,
  --F_CREACION TIMESTAMP WITH TIME ZONE ,
  F_CREACION VARCHAR(45)  NULL ,
  ETA VARCHAR(45)  NULL ,
  FECHALIBERADA VARCHAR(45) NULL ,
  FACILITY  VARCHAR(45) NULL ,
  SOLCLIENTE  VARCHAR(45)  NULL ,
  DO_EOM VARCHAR(45)  NULL ,
  EST_DO VARCHAR(45)  NULL ,
  T_ORDEN VARCHAR(45)  NULL ,
  ANT_EST VARCHAR(45)  NULL ,
  NUEV_EST VARCHAR(45)  NULL ,
  DO_WMS VARCHAR(45) NULL ,
  SC VARCHAR(45) NULL ,  
  ESTADO INT  NULL ,   
  CONSTRAINT CUADRATURA_DO_PK PRIMARY KEY (id) 
);
CREATE SEQUENCE SEQUENCE_CUADRATURA_DO INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;
-- Se encarga de asignar un valor unico y entero en la llave primaria id en la tabla TIMES_LIMIT
CREATE OR REPLACE TRIGGER TRIGGER_CUADRATURA_DO 
BEFORE INSERT ON CUADRATURA_DO 
FOR EACH ROW
BEGIN
	-- Column "id" uses sequence SEQUENCE_TIMES_LIMIT
	SELECT SEQUENCE_CUADRATURA_DO.NEXTVAL
	INTO   :new.id
	FROM   dual;
END;

-- -----------------------------------------------------
-- ASIGNAR PRIVILEGIOS DE UN TABLA DE USUARIOS
-- -----------------------------------------------------

GRANT SELECT, INSERT, UPDATE, DELETE ON KPIWEB.AREAS  TO TXD;


GRANT ALL ON SYSTEM.CUADRATURA_VENTAV_EOM TO PUBLIC;

GRANT ALL ON SYSTEM.CUADRATURA_VENTAV_JDA TO PUBLIC;


GRANT SELECT,INSERT,UPDATE,DELETE ON times_limit TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON agreement TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON authorities TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON economic_activity TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON commerce TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON financial_institution TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON commerce_agreement_fi TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON questions TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON questions_answers TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON channels TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON urls_callback TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON users TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON users_authorities TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON users_commerce TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON users_financial_institution TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON users_questions_answers TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON questions TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON questions_answers TO SYSTEM;


GRANT SELECT,INSERT,UPDATE,DELETE ON SYSTEM_LOG TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUMPLIMIENTO TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON ESTADO_CUMPLE TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON ESTADO_CUMPLE_RESUMEN TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON ESTADO_CUMPLIMIENTO TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON ESTADO_RESPONSABLE TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON TIPO_ORDEN TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CLIENTE_RETIRA TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON DESCRIPCION_EMPRESA TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON TIPO_GUIA TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON HORARIO TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON VENTA_EMPRESA TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUMPLIMIENTO_KPIWEB TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUMPLIMIENTO_KPIWEB_ESTATICO TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUMPLIMIENTO_ESTATICO_WS TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON TIPO_ESTADO_OC_VTAV TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON TIPO_ESTADO_OC_VTAV_STOCK TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUADRATURA_OC_VTAV_EOM TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUADRATURA_OC_VTAV_JDA TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUADRATURA_OC_VTAV_JDA_STOCK TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON HORARIO_VTAV_ACT TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON HORARIO_VTAV_ACT_STOCK TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CUADRATURA_OC_VTAV_COMPARATIVO TO SYSTEM;




GRANT SELECT,INSERT,UPDATE,DELETE ON TIENDAS TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON PADRINOS TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON GERENTES TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON CONTRATANTES TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON SOPORTES TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON REPORTADOS TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON AREAS TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON PRIORIDADES TO SYSTEM;
GRANT SELECT,INSERT,UPDATE,DELETE ON PAUTAS TO SYSTEM;




-- http://www.forosdelweb.com/f100/manejo-timestamp-554751/
alter session set nls_timestamp_tz_format = 'YYYY-MM-DD HH24:MI:SS.FF-TZH';
alter session set nls_timestamp_tz_format = 'YYYY-MM-DD HH24:MI:SS';
select * from cdr_asterisk;
select TO_CHAR('2016-01-01 08:30:25', 'YYYY-MM-DD HH:MI:SS') between '04/08/2008' AND '04/08/2008' AND RF.REFI_ID=RRF.REFI_ID
SELECT TO_DATE('2016-01-01 08:30:25', 'YYYY-MM-DD HH:MI:SS')
FROM dual;
select * from nls_session_parameters

GRANT SELECT,INSERT,UPDATE,DELETE ON document TO PUBLIC;
GRANT SELECT,INSERT,UPDATE,DELETE ON INVERSIS_TRANSACCION TO PUBLIC;

GRANT ALL ON SYSTEM.SYSTEM_PKG_LIS_TRANSACCION TO SYSTEM; 
GRANT ALL ON SYSTEM.SYSTEM_PKG_LIS_TRANSACCION TO PUBLIC;


GRANT ALL ON SYSTEM.SYSTEM_PKG_LIS_CHANNELS TO SYSTEM; 
GRANT ALL ON SYSTEM.SYSTEM_PKG_LIS_CHANNELS TO PUBLIC;

SELECT * FROM CHANNELS
SELECT * FROM channels;
SELECT  * FROM CHANNELS
SELECT CHANNEL.ID
           ,CHANNEL.DESCRIPTION
     FROM CHANNELS CHANNEL
     WHERE CHANNEL.ID           = par_rol_codigo_channel ---1
     --AND   CL.NUM_IDEN_CLIENTE_TAR = CLI.NUM_IDEN
     GROUP BY CHANNEL.ID,CHANNEL.DESCRIPTION;

